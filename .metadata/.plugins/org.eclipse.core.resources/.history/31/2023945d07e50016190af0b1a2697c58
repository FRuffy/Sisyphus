import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.expr.MethodCallExpr;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;
import com.github.javaparser.ast.CompilationUnit;

import java.util.*;

/*
 * The parser class
 * Takes a filename and attempts to parse it
 * Right now we only have a generic file reader
 * 
*/

public class SyntaxParser {
	
	private CompilationUnit cu;
	
	public SyntaxParser(String filename) throws FileNotFoundException{
		FileInputStream in = new FileInputStream(filename);	
		this.cu = JavaParser.parse(in);
	}
	
	

	/********************************************************************************************/
	/*
	 * Functions imported from the javaparser lib
	 */
	public void parse() {
		new VoidVisitorAdapter<Object>() {
			@Override
			public void visit(MethodCallExpr n, Object arg) {
				super.visit(n, arg);
				System.out.println(" [L " + n.getBegin() + "] " + n);
			}
		}.visit(this.cu, null);
			
	}
	
	/*Returns an arraylist of all MethodCallExpr objects from which
	 * we can gain information about the methods in a file
	 */
	public ArrayList<MethodCallExpr> getMethodCallExpr(){
		ArrayList<MethodCallExpr> methodCallExprList = new ArrayList<MethodCallExpr>();
		new VoidVisitorAdapter<Object>() {
			@Override
			public void visit(MethodCallExpr n, Object arg) {
				super.visit(n, arg);
				methodCallExprList.add(n);
				//System.out.println(n.getName());
			}
		}.visit(this.cu, null);
		return methodCallExprList;
	}
	
	/*
	 * Returns the methodname of a particular MethodCallExpr
	 */
	public String getMethodName(MethodCallExpr methodCall){
		return methodCall.getNameAsString();
	}
	
	/*Returns an arraylist of method names from an arraylist of MethodCallExpr*/
	public ArrayList<String> getMethodNames(ArrayList<MethodCallExpr> methodCalls) {
		ArrayList<String> methodList = new ArrayList<String> ();
		for(MethodCallExpr call: methodCalls){
			methodList.add(call.getNameAsString());
		}
		return methodList;
	}
	
	//public void typeNames(String)
	
	
}

/*public class SyntaxParser {

	String fileName;
	BufferedReader inputBuffer;

	public SyntaxParser(String fileName){
		this.fileName = fileName;		
	}

	public BufferedReader getParsedObject() throws FileNotFoundException {
		BufferedReader inputBuffer = new BufferedReader(new FileReader (fileName));
		return inputBuffer;
	}

	public void closeParser() throws IOException {
		inputBuffer.close();
	}

	/********************************************************************************************/
	/*
	 * Functions imported from the javaparser lib
	 */
	/*public void parse(String fileName) {
		try {
			File file = new File(fileName);
			new VoidVisitorAdapter<Object>() {
				@Override
				public void visit(MethodCallExpr n, Object arg) {
					super.visit(n, arg);
					System.out.println(" [L " + n.getBegin() + "] " + n);
				}
			}.visit(JavaParser.parse(file), null);
			System.out.println(); // empty line
		} catch (IOException e) {
			new RuntimeException(e);
		}
	}
	
}*/
