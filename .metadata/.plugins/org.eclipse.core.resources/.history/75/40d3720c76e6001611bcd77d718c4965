import com.github.javaparser.ast.body.MethodDeclaration;

import java.util.*;

/*
 * Method class that holds information about a particular method
 * - the name of the method, the return type of the method.
 */

public class Method {
	private String methodName;
	private String returnType;
	private ArrayList<MethodParameter> parameters;
	
	public Method(MethodDeclaration methodDeclaration){
		this.methodName = methodDeclaration.getNameAsString();
		String stringDeclaration = methodDeclaration.getDeclarationAsString();
		String[] splitedDeclaration = stringDeclaration.split("\\s");
		String paramType = "";
		String paramName = "";
		for(int i = 0; i<splitedDeclaration.length; i++){
			System.out.println(splitedDeclaration[i]);
			int openParenIndex = splitedDeclaration[i].indexOf('(');
			int closeParenIndex = splitedDeclaration[i].indexOf(')');
			int commaIndex = splitedDeclaration[i].indexOf(',');
			if(openParenIndex>-1){
				if(this.methodName.compareTo(splitedDeclaration[i].substring(0,openParenIndex))==0){
					this.returnType = splitedDeclaration[i-1];
					if(closeParenIndex==-1){
						paramType = splitedDeclaration[i].substring(openParenIndex+1,splitedDeclaration[i].length());
					}
				}
			}
			System.out.println("Check1");
			if(paramType.length()>0){
				if(commaIndex>0 || closeParenIndex>0){
					paramName = splitedDeclaration[i].substring(0, splitedDeclaration[i].length());
					MethodParameter param = new MethodParameter(paramName,paramType);
					this.parameters.add(param);
					System.out.println("Check2");
					if(closeParenIndex>-1){
						paramType = "";
					}
				}
				else{
					paramType = splitedDeclaration[i];
				}
			}
		}
	}
	
	public String getMethodName(){
		return this.methodName;
	}
	
	public String getReturnType(){
		return this.returnType;
	}
	
	public ArrayList<MethodParameter> getMethodParameters(){
		return this.parameters;
	}
}
