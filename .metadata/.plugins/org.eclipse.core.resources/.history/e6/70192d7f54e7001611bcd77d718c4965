import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.body.Parameter;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.type.Type;

import java.util.*;

/*
 * Method class that holds information about a particular method
 * - the name of the method, the return type of the method.
 */

public class Method {
	private String methodName;
	private Type returnType;
	private List<Parameter> parameters;
	private BlockStmt body;
	
	public Method(MethodDeclaration methodDeclaration){
		this.methodName = methodDeclaration.getNameAsString();
		this.parameters = methodDeclaration.getParameters();
		this.returnType = methodDeclaration.getType();
		this.body = methodDeclaration.getBody().get();
		
	}
	
	public String getMethodName(){
		return this.methodName;
	}
	
	public Type getReturnType(){
		return this.returnType;
	}
	
	public List<Parameter> getMethodParameters(){
		return this.parameters;
	}
	
	public BlockStmt getBody(){
		return this.body;
	}
	
	public BlockStmt getBodyWithoutComments(){
		ArrayList<Statement> statementsWithoutComments = new ArrayList<Statement>();
		List<Statement> allStatements = this.body.getStatements();
		boolean ifComment = false;
		for(int i = 0; i<allStatements.size(); i++){
			System.out.println(allStatements.get(i).getComment());
			/*String stringStatement = allStatements.get(i).toString();
			for(int j =0; j<stringStatement.length()-2; j++){
				if(stringStatement.substring(j, j+2).compareTo("//")==0){
					Statement newStatment = new Statement(allStatements.get(i).)
				}
			}*/
			
		}
	}
}
